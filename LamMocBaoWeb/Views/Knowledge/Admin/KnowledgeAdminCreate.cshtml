@using LamMocBaoWeb.Controllers
@using LamMocBaoWeb.Models
@using LamMocBaoWeb.Resources;
@using LamMocBaoWeb.ViewModels
@using Services.Services
@model CreateKnowledgeModel
@inject IServiceConfig _config 

@{
    ViewData["Title"] = @Resource.Label_Knowledges;
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    var entityId = Model.Id;
}
@using (Html.BeginForm("KnowledgeAdminCreate", "Knowledge", FormMethod.Post))
{
    <div class="main-dialog" id="main-modal" role="dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Resource.Knowledge_CreateNew_Knowledge</h5>
                <div class="button-group pull-right">
                    <button type="submit" class="btn btn-sm btn-primary">
                        <i class="fa-solid fa-floppy-disk"></i>
                        @Resource.Knowledge_Create
                    </button>
                    @Html.ActionLink(@Resource.Common_Close, "KnowledgeAdmin", "Knowledge", null, new {
                        @class="btn btn-sm btn-danger"
                    })
                </div>
            </div>
            <div class="main-content">
                <div class="form-content">
                    <div class="col-md-12 ">
                        <div class="form-group row">
                            <label>@Resource.Knowledge_Name</label>
                            <input type="text" class="form-control" placeholder="@Resource.Knowledge_Name" name="Name" value="@Model.Name">
                            @Html.ValidationMessageFor(d => d.Name)
                        </div>
                    </div>
                     <div class="col-md-12 ">
                        <div class="form-group row">
                            <label>@Resource.Knowledge_Summary</label>
                            <textarea class="form-control" placeholder="@Resource.Knowledge_Summary" id="KnowledgeSummary" name="Summary" rows="3">@Model.Summary </textarea>
                            @Html.ValidationMessageFor(d => d.Summary)
                        </div>
                    </div>
                    <div class="col-md-12 ">
                        <div class="form-group row">
                            <input type="hidden" id="UploadedImageId" name="UploadedImageId" />
                            <label>@Resource.Knowledge_ImagePreview</label>
                            <input type="file" id="custom-file-input" class="custom-file-input" accept="images/*" multiple>
                            <label class="custom-file-label" for="custom-file-input">@Resource.Knowledge_Select_ImagePreview</label>
                            <div class="d-flex" id="images-uploaded"></div>
                        </div>
                    </div>
                     <div class="col-md-12 ">
                        <div class="form-group row">
                            <label>@Resource.Knowledge_Content</label>
                            <textarea class="form-control" placeholder="@Resource.Knowledge_Content" id="KnowledgeContent" name="Content" rows="30">@Model.Content </textarea>
                            @Html.ValidationMessageFor(d => d.Content)
                        </div>
                    </div>
                    <div class="col-md-12 ">
                        <div class="form-group row">
                            <label>@Resource.Knowledge_SequenceNumber</label>
                            <input type="number" class="form-control" placeholder="@Resource.Knowledge_SequenceNumber" name="SequenceNumber" value="@Model.SequenceNumber">
                            @Html.ValidationMessageFor(d => d.SequenceNumber)
                        </div>
                    </div> 
                    <div class="col-md-12 ">
                        <div class="form-group row">
                            <input type="hidden" id="UploadedImageId" name="UploadedImageId" />
                            <label>@Resource.Knowledge_Select_ImagePreview_Public</label>
                            <input type="file" class="custom-file-preview" id="custom-file-preview" name="UploadedImageId" accept="images/*" />
                            <label class="custom-file-label" for="custom-file-preview">@Resource.Knowledge_Select_ImagePreview_Public</label>
                        </div>
                        @Html.ValidationMessageFor(d => d.UploadedImageId)
                        <div class="form-group row">
                            <img id="ImagePreview" src="" class="img-preview d-block"/>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<script>
    $(document).ready(function() {
        registerImageChangeEvent();
    });

    var uploadTimer;
    function registerImageChangeEvent() {
        $('input.custom-file-input').on('change', function(event) {
            if (uploadTimer) {
                clearTimeout(uploadTimer);
            }
            uploadTimer = setTimeout(() => {
                uploadFile(event);
            }, 1000)
            event.stopPropagation();
        });

        $('input.custom-file-preview').on('change', function(event) {
            if (uploadTimer) {
                clearTimeout(uploadTimer);
            }
            uploadTimer = setTimeout(() => {
                uploadFilePreview(event);
            }, 1000)
            event.stopPropagation();
        });
    }
    
    function uploadFilePreview(event) {
        var files = event.target.files;
        var data = new FormData();
        if(files.length){
            data.append(files[0].name, files[0]);
        }
        //data.append('entityId', '@entityId');
        LoaderService.Show();

        $.ajax({
            url: '@Url.ActionLink("Upload", "File")?entityId=@Model.Id',
            method: 'POST',
            data: data,
            processData: false,
            contentType: false,
            success: function (uploaded, textstatus, jqxhr) {
                if(!uploaded){
                    return;
                }
                
                $('#ImagePreview').attr('src', uploaded.Url);
                $('#UploadedImageId').attr('value', uploaded.Id);

                event.target.value = '';
                LoaderService.Hide();
            }
        });
    }
    var imageTemplate = '<img class="lmb-img-preview-knowledge" src="{0}" class="img-preview" onclick="insertToArea(this)" title="@Resource.Knowledge_Click_To_Add_At_Cursor"/>';
    function uploadFile(event) {
        var files = event.target.files;
        var data = new FormData();
        if(files.length){
            data.append(files[0].name, files[0]);
        }
        //data.append('entityId', '@entityId');
        LoaderService.Show();

        $.ajax({
            url: '@Url.ActionLink("Uploads", "File")?entityId=@Model.Id',
            method: 'POST',
            data: data,
            processData: false,
            contentType: false,
            success: function (uploaded, textstatus, jqxhr) {
                if(!uploaded){
                    return;
                }
                var newInsertedImages = uploaded.map(function(item) {
                    return String.format(imageTemplate, item.Url)
                });
                newInsertedImages.forEach(function(newInsertedImage) {
                    $('#images-uploaded').append(newInsertedImage);
                })
                event.target.value = '';
                LoaderService.Hide();
            }
        });
    }

    var displayTemplate = '<img src="{0}" class="lmb-kien-thuc"/>';
    function insertToArea(me) {
        var id = "KnowledgeContent";
        var source = me.currentSrc;
        var imageElem = String.format(displayTemplate, me.currentSrc);
        insertAtCaret(id, imageElem);
    }

    function insertAtCaret(areaId, text) {
        var txtarea = document.getElementById(areaId);
        if (!txtarea) {
            return;
        }

        var scrollPos = txtarea.scrollTop;
        var strPos = 0;
        var br = ((txtarea.selectionStart || txtarea.selectionStart == '0') ?
            "ff" : (document.selection ? "ie" : false));
        if (br == "ie") {
            txtarea.focus();
            var range = document.selection.createRange();
            range.moveStart('character', -txtarea.value.length);
            strPos = range.text.length;
        } else if (br == "ff") {
            strPos = txtarea.selectionStart;
        }

        var front = (txtarea.value).substring(0, strPos);
        var back = (txtarea.value).substring(strPos, txtarea.value.length);
        txtarea.value = front + text + back;
        strPos = strPos + text.length;
        if (br == "ie") {
            txtarea.focus();
            var ieRange = document.selection.createRange();
            ieRange.moveStart('character', -txtarea.value.length);
            ieRange.moveStart('character', strPos);
            ieRange.moveEnd('character', 0);
            ieRange.select();
        } else if (br == "ff") {
            txtarea.selectionStart = strPos;
            txtarea.selectionEnd = strPos;
            txtarea.focus();
        }

        txtarea.scrollTop = scrollPos;
    }
</script>